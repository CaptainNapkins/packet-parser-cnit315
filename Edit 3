#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/socket.h>
#include <arpa/inet.h>
#include <netinet/in.h>
#include <pcap.h>

#define SNAP_LEN 65535 // Maximum packet size to capture
#define TIMEOUT_MS 1000 // Timeout in milliseconds for pcap_next_ex
#define CAPTURE_DURATION 30 // Capture duration in seconds

// Function prototypes
void packetHandler(u_char *userData, const struct pcap_pkthdr *pkthdr, const u_char *packet);
void capturePackets(const char *interface);
void modifyAndSendPacket(const u_char *packet, struct pcap_pkthdr packet_header);
void reconstructPacket(const u_char *packet, struct pcap_pkthdr packet_header);
void displayMenu(const char *interface);
void displayCapture(const char *interface);
void displayICMP(const char *interface);
void displayUDP(const char *interface);
void displayTCP(const char *interface);
void listInterfaces();
char* selectInterface();
int startCapture(const char *interface);
void stopCapture();
int validateInput(const char *input);

int main() {
    int endFlag = 0;
    while (endFlag == 0) {
        printf("Main Menu:\n");
        printf("1. List Interfaces\n");
        printf("2. Add Interface\n");
        printf("3. Exit\n");
        int mainChoice;
        printf("Enter your choice: ");
        scanf("%d", &mainChoice);
        switch(mainChoice) {
            case 1:
                listInterfaces();
                break;
            case 2:
                addInterface();
                break;
            case 3:
                printf("Exiting program.\n");
                endFlag = 1;
                break;
            default:
                printf("Invalid choice. Please enter a number between 1 and 3.\n");
        }
    }
    return 0;
}

void listInterfaces() {
    // Implement function to list available interfaces
}

void addInterface() {
    // Implement function to add interface
}

void startCapture(const char *interface) {
    char errbuf[PCAP_ERRBUF_SIZE]; // Error buffer for libpcap
    pcap_t *handle; // Packet capture handle

    handle = pcap_open_live(interface, SNAP_LEN, 1, TIMEOUT_MS, errbuf); // Open the network interface for packet capture
    if (handle == NULL) {
        fprintf(stderr, "Error opening interface %s: %s\n", interface, errbuf);
        return;
    }

    printf("Capturing packets on interface %s...\n", interface);

    // Start capturing packets indefinitely
    pcap_loop(handle, -1, packetHandler, NULL);

    pcap_close(handle); // Close the packet capture handle when done
}

void packetHandler(u_char *userData, const struct pcap_pkthdr *pkthdr, const u_char *packet) {
    // Process the captured packet here
    printf("Packet captured: Length = %d\n", pkthdr->len);

    // Reconstruct and process the packet
    reconstructPacket(packet, *pkthdr);
}

void reconstructPacket(const u_char *packet, struct pcap_pkthdr packet_header) {
    // Implement packet reconstruction logic here
}

void displayMenu(const char *interface) {
    int subMenuChoice;
    do {
        printf("Interface: %s\n", interface);
        printf("Menu:\n");
        printf("1. Display Whole Capture\n");
        printf("2. Display ICMP Packets\n");
        printf("3. Display UDP Packets\n");
        printf("4. Display TCP Packets\n");
        printf("5. Go Back\n");
        printf("Enter your choice: ");
        scanf("%d", &subMenuChoice);
        switch(subMenuChoice) {
            case 1:
                displayCapture(interface);
                break;
            case 2:
                displayICMP(interface);
                break;
            case 3:
                displayUDP(interface);
                break;
            case 4:
                displayTCP(interface);
                break;
            case 5:
                printf("Going back.\n");
                break;
            default:
                printf("Invalid choice. Please enter a number between 1 and 5.\n");
        }
    } while (subMenuChoice != 5);
}

void displayCapture(const char *interface) {
    // Implement function to display whole capture
}

void displayICMP(const char *interface) {
    // Implement function to display ICMP packets
}

void displayUDP(const char *interface) {
    // Implement function to display UDP packets
}

void displayTCP(const char *interface) {
    // Implement function to display TCP packets
}

// Function to capture packets from the specified network interface
void capturePackets(const char *interface) {
    char errbuf[PCAP_ERRBUF_SIZE]; // Error buffer for libpcap
    pcap_t *handle; // Packet capture handle

    handle = pcap_open_live(interface, SNAP_LEN, 1, TIMEOUT_MS, errbuf); // Open the network interface for packet capture
    if (handle == NULL) {
        fprintf(stderr, "Error opening interface %s: %s\n", interface, errbuf);
        return;
    }

    printf("Capturing packets on interface %s...\n", interface);

    pcap_loop(handle, -1, packetHandler, NULL); // Start capturing packets indefinitely

    pcap_close(handle); // Close the packet capture handle when done
}

// Callback function to handle each captured packet
void packetHandler(u_char *userData, const struct pcap_pkthdr *pkthdr, const u_char *packet) {
    // Process the captured packet here
    printf("Packet captured: Length = %d\n", pkthdr->len);

    // Reconstruct and process the packet
    reconstructPacket(packet, *pkthdr);

    // Securely handle raw socket
    handleRawSocket();
}

// Function to reconstruct and process the captured packet
void reconstructPacket(const u_char *packet, struct pcap_pkthdr packet_header) {
    // Implement packet reconstruction logic here
    // Example: Reassemble fragmented packets, extract data from encapsulated protocols
    // For TCP streams, you can use libraries like libtins or implement your own logic
    // Extract HTTP content from TCP streams and display or save it
}

// Function to validate user inputs
int validateInput(const char *input) {
    // Implement input validation logic here
    // Example: Validate IP addresses, port numbers, packet data, etc.
    // Return 1 if input is valid, 0 otherwise
    return 1; // Placeholder 
}

void listInterfaces() {
    // Implement function to list available interfaces
}

char* selectInterface() {
    // Implement function to select an interface
    return NULL;
}
// Function to securely handle raw sockets
void handleRawSocket() {
    // Implement secure handling of raw sockets
}

// Function to query the user's requested interface
int queryInterface() {
    int usr;
    printf("Enter an interface (0 to quit): ");
    scanf("%d", &usr);
    return usr;
}

// Function to dynamically query the user's requested interface
char *queryInterface() {
    char *usr = NULL;
    for (int c = 3; c > 0; c--) { // Runs 3 times to attempt memory alloc, if it fails 3 times ends program
       
        usr = malloc(sizeof(char) * 50); // sizeof(char) gets size per char (1 byte) malloc allocates * 50 times  // creates dynamic memory for the usr response
        if (usr == NULL) { // If alloc is NULL, nothing was allocated meaning a failure
            printf("Memory allocation failed\nRetrying...\n");
        } else {
            break; // Successful alloc exits for
        }
    }
    if (usr == NULL) { // Ends program if memory alloc fails 3 times, returns 1
        printf("Memory allocation failed\nEnding.\n");
        exit(1);
    }

    printf("Enter an interface (q to quit): ");
    scanf("%s", usr);
    return usr;
}
